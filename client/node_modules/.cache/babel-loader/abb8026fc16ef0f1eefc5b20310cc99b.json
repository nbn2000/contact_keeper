{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar win32 = process.platform === 'win32';\n\nvar _require = require('./constants'),\n    REGEX_BACKSLASH = _require.REGEX_BACKSLASH,\n    REGEX_REMOVE_BACKSLASH = _require.REGEX_REMOVE_BACKSLASH,\n    REGEX_SPECIAL_CHARS = _require.REGEX_SPECIAL_CHARS,\n    REGEX_SPECIAL_CHARS_GLOBAL = _require.REGEX_SPECIAL_CHARS_GLOBAL;\n\nexports.isObject = function (val) {\n  return val !== null && typeof val === 'object' && !Array.isArray(val);\n};\n\nexports.hasRegexChars = function (str) {\n  return REGEX_SPECIAL_CHARS.test(str);\n};\n\nexports.isRegexChar = function (str) {\n  return str.length === 1 && exports.hasRegexChars(str);\n};\n\nexports.escapeRegex = function (str) {\n  return str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\\\$1');\n};\n\nexports.toPosixSlashes = function (str) {\n  return str.replace(REGEX_BACKSLASH, '/');\n};\n\nexports.removeBackslashes = function (str) {\n  return str.replace(REGEX_REMOVE_BACKSLASH, function (match) {\n    return match === '\\\\' ? '' : match;\n  });\n};\n\nexports.supportsLookbehinds = function () {\n  var segs = process.version.slice(1).split('.').map(Number);\n\n  if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {\n    return true;\n  }\n\n  return false;\n};\n\nexports.isWindows = function (options) {\n  if (options && typeof options.windows === 'boolean') {\n    return options.windows;\n  }\n\n  return win32 === true || path.sep === '\\\\';\n};\n\nexports.escapeLast = function (input, char, lastIdx) {\n  var idx = input.lastIndexOf(char, lastIdx);\n  if (idx === -1) return input;\n  if (input[idx - 1] === '\\\\') return exports.escapeLast(input, char, idx - 1);\n  return \"\".concat(input.slice(0, idx), \"\\\\\").concat(input.slice(idx));\n};\n\nexports.removePrefix = function (input) {\n  var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var output = input;\n\n  if (output.startsWith('./')) {\n    output = output.slice(2);\n    state.prefix = './';\n  }\n\n  return output;\n};\n\nexports.wrapOutput = function (input) {\n  var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var prepend = options.contains ? '' : '^';\n  var append = options.contains ? '' : '$';\n  var output = \"\".concat(prepend, \"(?:\").concat(input, \")\").concat(append);\n\n  if (state.negated === true) {\n    output = \"(?:^(?!\".concat(output, \").*$)\");\n  }\n\n  return output;\n};","map":null,"metadata":{},"sourceType":"script"}