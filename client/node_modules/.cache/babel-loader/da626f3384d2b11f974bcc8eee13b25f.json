{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/home/nbn2000/Desktop/Boilerplates/React Front to Back/contact-keeper/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"/home/nbn2000/Desktop/Boilerplates/React Front to Back/contact-keeper/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"/home/nbn2000/Desktop/Boilerplates/React Front to Back/contact-keeper/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/home/nbn2000/Desktop/Boilerplates/React Front to Back/contact-keeper/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/nbn2000/Desktop/Boilerplates/React Front to Back/contact-keeper/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _createClass = require(\"/home/nbn2000/Desktop/Boilerplates/React Front to Back/contact-keeper/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/nbn2000/Desktop/Boilerplates/React Front to Back/contact-keeper/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _slicedToArray = require(\"/home/nbn2000/Desktop/Boilerplates/React Front to Back/contact-keeper/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar fs = require('fs');\n\nvar _require = require('stream'),\n    Readable = _require.Readable;\n\nvar sysPath = require('path');\n\nvar _require2 = require('util'),\n    promisify = _require2.promisify;\n\nvar picomatch = require('picomatch');\n\nvar readdir = promisify(fs.readdir);\nvar stat = promisify(fs.stat);\nvar lstat = promisify(fs.lstat);\nvar realpath = promisify(fs.realpath);\n/**\n * @typedef {Object} EntryInfo\n * @property {String} path\n * @property {String} fullPath\n * @property {fs.Stats=} stats\n * @property {fs.Dirent=} dirent\n * @property {String} basename\n */\n\nvar BANG = '!';\nvar RECURSIVE_ERROR_CODE = 'READDIRP_RECURSIVE_ERROR';\nvar NORMAL_FLOW_ERRORS = new Set(['ENOENT', 'EPERM', 'EACCES', 'ELOOP', RECURSIVE_ERROR_CODE]);\nvar FILE_TYPE = 'files';\nvar DIR_TYPE = 'directories';\nvar FILE_DIR_TYPE = 'files_directories';\nvar EVERYTHING_TYPE = 'all';\nvar ALL_TYPES = [FILE_TYPE, DIR_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE];\n\nvar isNormalFlowError = function isNormalFlowError(error) {\n  return NORMAL_FLOW_ERRORS.has(error.code);\n};\n\nvar _process$versions$nod = process.versions.node.split('.').slice(0, 2).map(function (n) {\n  return Number.parseInt(n, 10);\n}),\n    _process$versions$nod2 = _slicedToArray(_process$versions$nod, 2),\n    maj = _process$versions$nod2[0],\n    min = _process$versions$nod2[1];\n\nvar wantBigintFsStats = process.platform === 'win32' && (maj > 10 || maj === 10 && min >= 5);\n\nvar normalizeFilter = function normalizeFilter(filter) {\n  if (filter === undefined) return;\n  if (typeof filter === 'function') return filter;\n\n  if (typeof filter === 'string') {\n    var glob = picomatch(filter.trim());\n    return function (entry) {\n      return glob(entry.basename);\n    };\n  }\n\n  if (Array.isArray(filter)) {\n    var positive = [];\n    var negative = [];\n\n    var _iterator = _createForOfIteratorHelper(filter),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var item = _step.value;\n        var trimmed = item.trim();\n\n        if (trimmed.charAt(0) === BANG) {\n          negative.push(picomatch(trimmed.slice(1)));\n        } else {\n          positive.push(picomatch(trimmed));\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    if (negative.length > 0) {\n      if (positive.length > 0) {\n        return function (entry) {\n          return positive.some(function (f) {\n            return f(entry.basename);\n          }) && !negative.some(function (f) {\n            return f(entry.basename);\n          });\n        };\n      }\n\n      return function (entry) {\n        return !negative.some(function (f) {\n          return f(entry.basename);\n        });\n      };\n    }\n\n    return function (entry) {\n      return positive.some(function (f) {\n        return f(entry.basename);\n      });\n    };\n  }\n};\n\nvar ReaddirpStream = /*#__PURE__*/function (_Readable) {\n  _inherits(ReaddirpStream, _Readable);\n\n  _createClass(ReaddirpStream, null, [{\n    key: \"defaultOptions\",\n    get: function get() {\n      return {\n        root: '.',\n\n        /* eslint-disable no-unused-vars */\n        fileFilter: function fileFilter(path) {\n          return true;\n        },\n        directoryFilter: function directoryFilter(path) {\n          return true;\n        },\n\n        /* eslint-enable no-unused-vars */\n        type: FILE_TYPE,\n        lstat: false,\n        depth: 2147483648,\n        alwaysStat: false\n      };\n    }\n  }]);\n\n  function ReaddirpStream() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ReaddirpStream);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReaddirpStream).call(this, {\n      objectMode: true,\n      autoDestroy: true,\n      highWaterMark: options.highWaterMark || 4096\n    }));\n\n    var opts = _objectSpread({}, ReaddirpStream.defaultOptions, options);\n\n    var root = opts.root,\n        type = opts.type;\n    _this._fileFilter = normalizeFilter(opts.fileFilter);\n    _this._directoryFilter = normalizeFilter(opts.directoryFilter);\n    var statMethod = opts.lstat ? lstat : stat; // Use bigint stats if it's windows and stat() supports options (node 10+).\n\n    if (wantBigintFsStats) {\n      _this._stat = function (path) {\n        return statMethod(path, {\n          bigint: true\n        });\n      };\n    } else {\n      _this._stat = statMethod;\n    }\n\n    _this._maxDepth = opts.depth;\n    _this._wantsDir = [DIR_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE].includes(type);\n    _this._wantsFile = [FILE_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE].includes(type);\n    _this._wantsEverything = type === EVERYTHING_TYPE;\n    _this._root = sysPath.resolve(root);\n    _this._isDirent = 'Dirent' in fs && !opts.alwaysStat;\n    _this._statsProp = _this._isDirent ? 'dirent' : 'stats';\n    _this._rdOptions = {\n      encoding: 'utf8',\n      withFileTypes: _this._isDirent\n    }; // Launch stream with one parent, the root dir.\n\n    _this.parents = [_this._exploreDir(root, 1)];\n    _this.reading = false;\n    _this.parent = undefined;\n    return _this;\n  }\n\n  _createClass(ReaddirpStream, [{\n    key: \"_read\",\n    value: function () {\n      var _read2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(batch) {\n        var _this2 = this;\n\n        var _loop, _ret;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.reading) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                this.reading = true;\n                _context2.prev = 3;\n                _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                  var _ref, path, depth, _ref$files, files, slice, _iterator2, _step2, entry, entryType, parent;\n\n                  return _regeneratorRuntime().wrap(function _loop$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _ref = _this2.parent || {}, path = _ref.path, depth = _ref.depth, _ref$files = _ref.files, files = _ref$files === void 0 ? [] : _ref$files;\n\n                          if (!(files.length > 0)) {\n                            _context.next = 30;\n                            break;\n                          }\n\n                          slice = files.splice(0, batch).map(function (dirent) {\n                            return _this2._formatEntry(dirent, path);\n                          });\n                          _context.t0 = _createForOfIteratorHelper;\n                          _context.next = 6;\n                          return Promise.all(slice);\n\n                        case 6:\n                          _context.t1 = _context.sent;\n                          _iterator2 = (0, _context.t0)(_context.t1);\n                          _context.prev = 8;\n\n                          _iterator2.s();\n\n                        case 10:\n                          if ((_step2 = _iterator2.n()).done) {\n                            _context.next = 20;\n                            break;\n                          }\n\n                          entry = _step2.value;\n\n                          if (!_this2.destroyed) {\n                            _context.next = 14;\n                            break;\n                          }\n\n                          return _context.abrupt(\"return\", {\n                            v: void 0\n                          });\n\n                        case 14:\n                          _context.next = 16;\n                          return _this2._getEntryType(entry);\n\n                        case 16:\n                          entryType = _context.sent;\n\n                          if (entryType === 'directory' && _this2._directoryFilter(entry)) {\n                            if (depth <= _this2._maxDepth) {\n                              _this2.parents.push(_this2._exploreDir(entry.fullPath, depth + 1));\n                            }\n\n                            if (_this2._wantsDir) {\n                              _this2.push(entry);\n\n                              batch--;\n                            }\n                          } else if ((entryType === 'file' || _this2._includeAsFile(entry)) && _this2._fileFilter(entry)) {\n                            if (_this2._wantsFile) {\n                              _this2.push(entry);\n\n                              batch--;\n                            }\n                          }\n\n                        case 18:\n                          _context.next = 10;\n                          break;\n\n                        case 20:\n                          _context.next = 25;\n                          break;\n\n                        case 22:\n                          _context.prev = 22;\n                          _context.t2 = _context[\"catch\"](8);\n\n                          _iterator2.e(_context.t2);\n\n                        case 25:\n                          _context.prev = 25;\n\n                          _iterator2.f();\n\n                          return _context.finish(25);\n\n                        case 28:\n                          _context.next = 39;\n                          break;\n\n                        case 30:\n                          parent = _this2.parents.pop();\n\n                          if (parent) {\n                            _context.next = 34;\n                            break;\n                          }\n\n                          _this2.push(null);\n\n                          return _context.abrupt(\"return\", \"break\");\n\n                        case 34:\n                          _context.next = 36;\n                          return parent;\n\n                        case 36:\n                          _this2.parent = _context.sent;\n\n                          if (!_this2.destroyed) {\n                            _context.next = 39;\n                            break;\n                          }\n\n                          return _context.abrupt(\"return\", {\n                            v: void 0\n                          });\n\n                        case 39:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _loop, null, [[8, 22, 25, 28]]);\n                });\n\n              case 5:\n                if (!(!this.destroyed && batch > 0)) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                return _context2.delegateYield(_loop(), \"t0\", 7);\n\n              case 7:\n                _ret = _context2.t0;\n\n                if (!(_ret === \"break\")) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                return _context2.abrupt(\"break\", 14);\n\n              case 10:\n                if (!(typeof _ret === \"object\")) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _ret.v);\n\n              case 12:\n                _context2.next = 5;\n                break;\n\n              case 14:\n                _context2.next = 19;\n                break;\n\n              case 16:\n                _context2.prev = 16;\n                _context2.t1 = _context2[\"catch\"](3);\n                this.destroy(_context2.t1);\n\n              case 19:\n                _context2.prev = 19;\n                this.reading = false;\n                return _context2.finish(19);\n\n              case 22:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee, this, [[3, 16, 19, 22]]);\n      }));\n\n      function _read(_x) {\n        return _read2.apply(this, arguments);\n      }\n\n      return _read;\n    }()\n  }, {\n    key: \"_exploreDir\",\n    value: function () {\n      var _exploreDir2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(path, depth) {\n        var files;\n        return _regeneratorRuntime().wrap(function _callee2$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return readdir(path, this._rdOptions);\n\n              case 3:\n                files = _context3.sent;\n                _context3.next = 9;\n                break;\n\n              case 6:\n                _context3.prev = 6;\n                _context3.t0 = _context3[\"catch\"](0);\n\n                this._onError(_context3.t0);\n\n              case 9:\n                return _context3.abrupt(\"return\", {\n                  files: files,\n                  depth: depth,\n                  path: path\n                });\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee2, this, [[0, 6]]);\n      }));\n\n      function _exploreDir(_x2, _x3) {\n        return _exploreDir2.apply(this, arguments);\n      }\n\n      return _exploreDir;\n    }()\n  }, {\n    key: \"_formatEntry\",\n    value: function () {\n      var _formatEntry2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(dirent, path) {\n        var entry, basename, fullPath;\n        return _regeneratorRuntime().wrap(function _callee3$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                basename = this._isDirent ? dirent.name : dirent;\n                fullPath = sysPath.resolve(sysPath.join(path, basename));\n                entry = {\n                  path: sysPath.relative(this._root, fullPath),\n                  fullPath: fullPath,\n                  basename: basename\n                };\n\n                if (!this._isDirent) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                _context4.t0 = dirent;\n                _context4.next = 11;\n                break;\n\n              case 8:\n                _context4.next = 10;\n                return this._stat(fullPath);\n\n              case 10:\n                _context4.t0 = _context4.sent;\n\n              case 11:\n                entry[this._statsProp] = _context4.t0;\n                _context4.next = 17;\n                break;\n\n              case 14:\n                _context4.prev = 14;\n                _context4.t1 = _context4[\"catch\"](0);\n\n                this._onError(_context4.t1);\n\n              case 17:\n                return _context4.abrupt(\"return\", entry);\n\n              case 18:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee3, this, [[0, 14]]);\n      }));\n\n      function _formatEntry(_x4, _x5) {\n        return _formatEntry2.apply(this, arguments);\n      }\n\n      return _formatEntry;\n    }()\n  }, {\n    key: \"_onError\",\n    value: function _onError(err) {\n      if (isNormalFlowError(err) && !this.destroyed) {\n        this.emit('warn', err);\n      } else {\n        this.destroy(err);\n      }\n    }\n  }, {\n    key: \"_getEntryType\",\n    value: function () {\n      var _getEntryType2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(entry) {\n        var stats, full, entryRealPath, entryRealPathStats, len, recursiveError;\n        return _regeneratorRuntime().wrap(function _callee4$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                // entry may be undefined, because a warning or an error were emitted\n                // and the statsProp is undefined\n                stats = entry && entry[this._statsProp];\n\n                if (stats) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 3:\n                if (!stats.isFile()) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", 'file');\n\n              case 5:\n                if (!stats.isDirectory()) {\n                  _context5.next = 7;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", 'directory');\n\n              case 7:\n                if (!(stats && stats.isSymbolicLink())) {\n                  _context5.next = 30;\n                  break;\n                }\n\n                full = entry.fullPath;\n                _context5.prev = 9;\n                _context5.next = 12;\n                return realpath(full);\n\n              case 12:\n                entryRealPath = _context5.sent;\n                _context5.next = 15;\n                return lstat(entryRealPath);\n\n              case 15:\n                entryRealPathStats = _context5.sent;\n\n                if (!entryRealPathStats.isFile()) {\n                  _context5.next = 18;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", 'file');\n\n              case 18:\n                if (!entryRealPathStats.isDirectory()) {\n                  _context5.next = 25;\n                  break;\n                }\n\n                len = entryRealPath.length;\n\n                if (!(full.startsWith(entryRealPath) && full.substr(len, 1) === sysPath.sep)) {\n                  _context5.next = 24;\n                  break;\n                }\n\n                recursiveError = new Error(\"Circular symlink detected: \\\"\".concat(full, \"\\\" points to \\\"\").concat(entryRealPath, \"\\\"\"));\n                recursiveError.code = RECURSIVE_ERROR_CODE;\n                return _context5.abrupt(\"return\", this._onError(recursiveError));\n\n              case 24:\n                return _context5.abrupt(\"return\", 'directory');\n\n              case 25:\n                _context5.next = 30;\n                break;\n\n              case 27:\n                _context5.prev = 27;\n                _context5.t0 = _context5[\"catch\"](9);\n\n                this._onError(_context5.t0);\n\n              case 30:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee4, this, [[9, 27]]);\n      }));\n\n      function _getEntryType(_x6) {\n        return _getEntryType2.apply(this, arguments);\n      }\n\n      return _getEntryType;\n    }()\n  }, {\n    key: \"_includeAsFile\",\n    value: function _includeAsFile(entry) {\n      var stats = entry && entry[this._statsProp];\n      return stats && this._wantsEverything && !stats.isDirectory();\n    }\n  }]);\n\n  return ReaddirpStream;\n}(Readable);\n/**\n * @typedef {Object} ReaddirpArguments\n * @property {Function=} fileFilter\n * @property {Function=} directoryFilter\n * @property {String=} type\n * @property {Number=} depth\n * @property {String=} root\n * @property {Boolean=} lstat\n * @property {Boolean=} bigint\n */\n\n/**\n * Main function which ends up calling readdirRec and reads all files and directories in given root recursively.\n * @param {String} root Root directory\n * @param {ReaddirpArguments=} options Options to specify root (start directory), filters and recursion depth\n */\n\n\nvar readdirp = function readdirp(root) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var type = options.entryType || options.type;\n  if (type === 'both') type = FILE_DIR_TYPE; // backwards-compatibility\n\n  if (type) options.type = type;\n\n  if (!root) {\n    throw new Error('readdirp: root argument is required. Usage: readdirp(root, options)');\n  } else if (typeof root !== 'string') {\n    throw new TypeError('readdirp: root argument must be a string. Usage: readdirp(root, options)');\n  } else if (type && !ALL_TYPES.includes(type)) {\n    throw new Error(\"readdirp: Invalid type passed. Use one of \".concat(ALL_TYPES.join(', ')));\n  }\n\n  options.root = root;\n  return new ReaddirpStream(options);\n};\n\nvar readdirpPromise = function readdirpPromise(root) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    var files = [];\n    readdirp(root, options).on('data', function (entry) {\n      return files.push(entry);\n    }).on('end', function () {\n      return resolve(files);\n    }).on('error', function (error) {\n      return reject(error);\n    });\n  });\n};\n\nreaddirp.promise = readdirpPromise;\nreaddirp.ReaddirpStream = ReaddirpStream;\nreaddirp.default = readdirp;\nmodule.exports = readdirp;","map":null,"metadata":{},"sourceType":"script"}