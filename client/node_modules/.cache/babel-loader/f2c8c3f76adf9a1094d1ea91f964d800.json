{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/home/nbn2000/Desktop/Boilerplates/React Front to Back/contact-keeper/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _asyncToGenerator = require(\"/home/nbn2000/Desktop/Boilerplates/React Front to Back/contact-keeper/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/nbn2000/Desktop/Boilerplates/React Front to Back/contact-keeper/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/nbn2000/Desktop/Boilerplates/React Front to Back/contact-keeper/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar fs = require('fs');\n\nvar sysPath = require('path');\n\nvar _require = require('util'),\n    promisify = _require.promisify;\n\nvar fsevents;\n\ntry {\n  fsevents = require('fsevents');\n} catch (error) {\n  if (process.env.CHOKIDAR_PRINT_FSEVENTS_REQUIRE_ERROR) console.error(error);\n}\n\nif (fsevents) {\n  // TODO: real check\n  var mtch = process.version.match(/v(\\d+)\\.(\\d+)/);\n\n  if (mtch && mtch[1] && mtch[2]) {\n    var maj = Number.parseInt(mtch[1], 10);\n    var min = Number.parseInt(mtch[2], 10);\n\n    if (maj === 8 && min < 16) {\n      fsevents = undefined;\n    }\n  }\n}\n\nvar _require2 = require('./constants'),\n    EV_ADD = _require2.EV_ADD,\n    EV_CHANGE = _require2.EV_CHANGE,\n    EV_ADD_DIR = _require2.EV_ADD_DIR,\n    EV_UNLINK = _require2.EV_UNLINK,\n    EV_ERROR = _require2.EV_ERROR,\n    STR_DATA = _require2.STR_DATA,\n    STR_END = _require2.STR_END,\n    FSEVENT_CREATED = _require2.FSEVENT_CREATED,\n    FSEVENT_MODIFIED = _require2.FSEVENT_MODIFIED,\n    FSEVENT_DELETED = _require2.FSEVENT_DELETED,\n    FSEVENT_MOVED = _require2.FSEVENT_MOVED,\n    FSEVENT_UNKNOWN = _require2.FSEVENT_UNKNOWN,\n    FSEVENT_TYPE_FILE = _require2.FSEVENT_TYPE_FILE,\n    FSEVENT_TYPE_DIRECTORY = _require2.FSEVENT_TYPE_DIRECTORY,\n    FSEVENT_TYPE_SYMLINK = _require2.FSEVENT_TYPE_SYMLINK,\n    ROOT_GLOBSTAR = _require2.ROOT_GLOBSTAR,\n    DIR_SUFFIX = _require2.DIR_SUFFIX,\n    DOT_SLASH = _require2.DOT_SLASH,\n    FUNCTION_TYPE = _require2.FUNCTION_TYPE,\n    EMPTY_FN = _require2.EMPTY_FN,\n    IDENTITY_FN = _require2.IDENTITY_FN;\n\nvar Depth = function Depth(value) {\n  return isNaN(value) ? {} : {\n    depth: value\n  };\n};\n\nvar stat = promisify(fs.stat);\nvar lstat = promisify(fs.lstat);\nvar realpath = promisify(fs.realpath);\nvar statMethods = {\n  stat: stat,\n  lstat: lstat\n};\n/**\n * @typedef {String} Path\n */\n\n/**\n * @typedef {Object} FsEventsWatchContainer\n * @property {Set<Function>} listeners\n * @property {Function} rawEmitter\n * @property {{stop: Function}} watcher\n */\n// fsevents instance helper functions\n\n/**\n * Object to hold per-process fsevents instances (may be shared across chokidar FSWatcher instances)\n * @type {Map<Path,FsEventsWatchContainer>}\n */\n\nvar FSEventsWatchers = new Map(); // Threshold of duplicate path prefixes at which to start\n// consolidating going forward\n\nvar consolidateThreshhold = 10;\nvar wrongEventFlags = new Set([69888, 70400, 71424, 72704, 73472, 131328, 131840, 262912]);\n/**\n * Instantiates the fsevents interface\n * @param {Path} path path to be watched\n * @param {Function} callback called when fsevents is bound and ready\n * @returns {{stop: Function}} new fsevents instance\n */\n\nvar createFSEventsInstance = function createFSEventsInstance(path, callback) {\n  var stop = fsevents.watch(path, callback);\n  return {\n    stop: stop\n  };\n};\n/**\n * Instantiates the fsevents interface or binds listeners to an existing one covering\n * the same file tree.\n * @param {Path} path           - to be watched\n * @param {Path} realPath       - real path for symlinks\n * @param {Function} listener   - called when fsevents emits events\n * @param {Function} rawEmitter - passes data to listeners of the 'raw' event\n * @returns {Function} closer\n */\n\n\nfunction setFSEventsListener(path, realPath, listener, rawEmitter) {\n  var watchPath = sysPath.extname(realPath) ? sysPath.dirname(realPath) : realPath;\n  var parentPath = sysPath.dirname(watchPath);\n  var cont = FSEventsWatchers.get(watchPath); // If we've accumulated a substantial number of paths that\n  // could have been consolidated by watching one directory\n  // above the current one, create a watcher on the parent\n  // path instead, so that we do consolidate going forward.\n\n  if (couldConsolidate(parentPath)) {\n    watchPath = parentPath;\n  }\n\n  var resolvedPath = sysPath.resolve(path);\n  var hasSymlink = resolvedPath !== realPath;\n\n  var filteredListener = function filteredListener(fullPath, flags, info) {\n    if (hasSymlink) fullPath = fullPath.replace(realPath, resolvedPath);\n    if (fullPath === resolvedPath || !fullPath.indexOf(resolvedPath + sysPath.sep)) listener(fullPath, flags, info);\n  }; // check if there is already a watcher on a parent path\n  // modifies `watchPath` to the parent path when it finds a match\n\n\n  var watchedParent = false;\n\n  var _iterator = _createForOfIteratorHelper(FSEventsWatchers.keys()),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var watchedPath = _step.value;\n\n      if (realPath.indexOf(sysPath.resolve(watchedPath) + sysPath.sep) === 0) {\n        watchPath = watchedPath;\n        cont = FSEventsWatchers.get(watchPath);\n        watchedParent = true;\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (cont || watchedParent) {\n    cont.listeners.add(filteredListener);\n  } else {\n    cont = {\n      listeners: new Set([filteredListener]),\n      rawEmitter: rawEmitter,\n      watcher: createFSEventsInstance(watchPath, function (fullPath, flags) {\n        if (!cont.listeners.size) return;\n        var info = fsevents.getInfo(fullPath, flags);\n        cont.listeners.forEach(function (list) {\n          list(fullPath, flags, info);\n        });\n        cont.rawEmitter(info.event, fullPath, info);\n      })\n    };\n    FSEventsWatchers.set(watchPath, cont);\n  } // removes this instance's listeners and closes the underlying fsevents\n  // instance if there are no more listeners left\n\n\n  return function () {\n    var lst = cont.listeners;\n    lst.delete(filteredListener);\n\n    if (!lst.size) {\n      FSEventsWatchers.delete(watchPath);\n      if (cont.watcher) return cont.watcher.stop().then(function () {\n        cont.rawEmitter = cont.watcher = undefined;\n        Object.freeze(cont);\n      });\n    }\n  };\n} // Decide whether or not we should start a new higher-level\n// parent watcher\n\n\nvar couldConsolidate = function couldConsolidate(path) {\n  var count = 0;\n\n  var _iterator2 = _createForOfIteratorHelper(FSEventsWatchers.keys()),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var watchPath = _step2.value;\n\n      if (watchPath.indexOf(path) === 0) {\n        count++;\n\n        if (count >= consolidateThreshhold) {\n          return true;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return false;\n}; // returns boolean indicating whether fsevents can be used\n\n\nvar canUse = function canUse() {\n  return fsevents && FSEventsWatchers.size < 128;\n}; // determines subdirectory traversal levels from root to path\n\n\nvar calcDepth = function calcDepth(path, root) {\n  var i = 0;\n\n  while (!path.indexOf(root) && (path = sysPath.dirname(path)) !== root) {\n    i++;\n  }\n\n  return i;\n}; // returns boolean indicating whether the fsevents' event info has the same type\n// as the one returned by fs.stat\n\n\nvar sameTypes = function sameTypes(info, stats) {\n  return info.type === FSEVENT_TYPE_DIRECTORY && stats.isDirectory() || info.type === FSEVENT_TYPE_SYMLINK && stats.isSymbolicLink() || info.type === FSEVENT_TYPE_FILE && stats.isFile();\n};\n/**\n * @mixin\n */\n\n\nvar FsEventsHandler = /*#__PURE__*/function () {\n  /**\n   * @param {import('../index').FSWatcher} fsw\n   */\n  function FsEventsHandler(fsw) {\n    _classCallCheck(this, FsEventsHandler);\n\n    this.fsw = fsw;\n  }\n\n  _createClass(FsEventsHandler, [{\n    key: \"checkIgnored\",\n    value: function checkIgnored(path, stats) {\n      var ipaths = this.fsw._ignoredPaths;\n\n      if (this.fsw._isIgnored(path, stats)) {\n        ipaths.add(path);\n\n        if (stats && stats.isDirectory()) {\n          ipaths.add(path + ROOT_GLOBSTAR);\n        }\n\n        return true;\n      }\n\n      ipaths.delete(path);\n      ipaths.delete(path + ROOT_GLOBSTAR);\n    }\n  }, {\n    key: \"addOrChange\",\n    value: function addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts) {\n      var event = watchedDir.has(item) ? EV_CHANGE : EV_ADD;\n      this.handleEvent(event, path, fullPath, realPath, parent, watchedDir, item, info, opts);\n    }\n  }, {\n    key: \"checkExists\",\n    value: function () {\n      var _checkExists = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path, fullPath, realPath, parent, watchedDir, item, info, opts) {\n        var stats;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return stat(path);\n\n              case 3:\n                stats = _context.sent;\n\n                if (!this.fsw.closed) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 6:\n                if (sameTypes(info, stats)) {\n                  this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n                } else {\n                  this.handleEvent(EV_UNLINK, path, fullPath, realPath, parent, watchedDir, item, info, opts);\n                }\n\n                _context.next = 12;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (_context.t0.code === 'EACCES') {\n                  this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n                } else {\n                  this.handleEvent(EV_UNLINK, path, fullPath, realPath, parent, watchedDir, item, info, opts);\n                }\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 9]]);\n      }));\n\n      function checkExists(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n        return _checkExists.apply(this, arguments);\n      }\n\n      return checkExists;\n    }()\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(event, path, fullPath, realPath, parent, watchedDir, item, info, opts) {\n      if (this.fsw.closed || this.checkIgnored(path)) return;\n\n      if (event === EV_UNLINK) {\n        var isDirectory = info.type === FSEVENT_TYPE_DIRECTORY; // suppress unlink events on never before seen files\n\n        if (isDirectory || watchedDir.has(item)) {\n          this.fsw._remove(parent, item, isDirectory);\n        }\n      } else {\n        if (event === EV_ADD) {\n          // track new directories\n          if (info.type === FSEVENT_TYPE_DIRECTORY) this.fsw._getWatchedDir(path);\n\n          if (info.type === FSEVENT_TYPE_SYMLINK && opts.followSymlinks) {\n            // push symlinks back to the top of the stack to get handled\n            var curDepth = opts.depth === undefined ? undefined : calcDepth(fullPath, realPath) + 1;\n            return this._addToFsEvents(path, false, true, curDepth);\n          } // track new paths\n          // (other than symlinks being followed, which will be tracked soon)\n\n\n          this.fsw._getWatchedDir(parent).add(item);\n        }\n        /**\n         * @type {'add'|'addDir'|'unlink'|'unlinkDir'}\n         */\n\n\n        var eventName = info.type === FSEVENT_TYPE_DIRECTORY ? event + DIR_SUFFIX : event;\n\n        this.fsw._emit(eventName, path);\n\n        if (eventName === EV_ADD_DIR) this._addToFsEvents(path, false, true);\n      }\n    }\n    /**\n     * Handle symlinks encountered during directory scan\n     * @param {String} watchPath  - file/dir path to be watched with fsevents\n     * @param {String} realPath   - real path (in case of symlinks)\n     * @param {Function} transform  - path transformer\n     * @param {Function} globFilter - path filter in case a glob pattern was provided\n     * @returns {Function} closer for the watcher instance\n    */\n\n  }, {\n    key: \"_watchWithFsEvents\",\n    value: function _watchWithFsEvents(watchPath, realPath, transform, globFilter) {\n      var _this = this;\n\n      if (this.fsw.closed || this.fsw._isIgnored(watchPath)) return;\n      var opts = this.fsw.options;\n\n      var watchCallback = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(fullPath, flags, info) {\n          var path, parent, item, watchedDir, stats;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!_this.fsw.closed) {\n                    _context2.next = 2;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\");\n\n                case 2:\n                  if (!(opts.depth !== undefined && calcDepth(fullPath, realPath) > opts.depth)) {\n                    _context2.next = 4;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\");\n\n                case 4:\n                  path = transform(sysPath.join(watchPath, sysPath.relative(watchPath, fullPath)));\n\n                  if (!(globFilter && !globFilter(path))) {\n                    _context2.next = 7;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\");\n\n                case 7:\n                  // ensure directories are tracked\n                  parent = sysPath.dirname(path);\n                  item = sysPath.basename(path);\n                  watchedDir = _this.fsw._getWatchedDir(info.type === FSEVENT_TYPE_DIRECTORY ? path : parent); // correct for wrong events emitted\n\n                  if (!(wrongEventFlags.has(flags) || info.event === FSEVENT_UNKNOWN)) {\n                    _context2.next = 30;\n                    break;\n                  }\n\n                  if (!(typeof opts.ignored === FUNCTION_TYPE)) {\n                    _context2.next = 27;\n                    break;\n                  }\n\n                  _context2.prev = 12;\n                  _context2.next = 15;\n                  return stat(path);\n\n                case 15:\n                  stats = _context2.sent;\n                  _context2.next = 20;\n                  break;\n\n                case 18:\n                  _context2.prev = 18;\n                  _context2.t0 = _context2[\"catch\"](12);\n\n                case 20:\n                  if (!_this.fsw.closed) {\n                    _context2.next = 22;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\");\n\n                case 22:\n                  if (!_this.checkIgnored(path, stats)) {\n                    _context2.next = 24;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\");\n\n                case 24:\n                  if (sameTypes(info, stats)) {\n                    _this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n                  } else {\n                    _this.handleEvent(EV_UNLINK, path, fullPath, realPath, parent, watchedDir, item, info, opts);\n                  }\n\n                  _context2.next = 28;\n                  break;\n\n                case 27:\n                  _this.checkExists(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n\n                case 28:\n                  _context2.next = 35;\n                  break;\n\n                case 30:\n                  _context2.t1 = info.event;\n                  _context2.next = _context2.t1 === FSEVENT_CREATED ? 33 : _context2.t1 === FSEVENT_MODIFIED ? 33 : _context2.t1 === FSEVENT_DELETED ? 34 : _context2.t1 === FSEVENT_MOVED ? 34 : 35;\n                  break;\n\n                case 33:\n                  return _context2.abrupt(\"return\", _this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts));\n\n                case 34:\n                  return _context2.abrupt(\"return\", _this.checkExists(path, fullPath, realPath, parent, watchedDir, item, info, opts));\n\n                case 35:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[12, 18]]);\n        }));\n\n        return function watchCallback(_x9, _x10, _x11) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      var closer = setFSEventsListener(watchPath, realPath, watchCallback, this.fsw._emitRaw);\n\n      this.fsw._emitReady();\n\n      return closer;\n    }\n    /**\n     * Handle symlinks encountered during directory scan\n     * @param {String} linkPath path to symlink\n     * @param {String} fullPath absolute path to the symlink\n     * @param {Function} transform pre-existing path transformer\n     * @param {Number} curDepth level of subdirectories traversed to where symlink is\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"_handleFsEventsSymlink\",\n    value: function () {\n      var _handleFsEventsSymlink2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(linkPath, fullPath, transform, curDepth) {\n        var linkTarget;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(this.fsw.closed || this.fsw._symlinkPaths.has(fullPath))) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 2:\n                this.fsw._symlinkPaths.set(fullPath, true);\n\n                this.fsw._incrReadyCount();\n\n                _context3.prev = 4;\n                _context3.next = 7;\n                return realpath(linkPath);\n\n              case 7:\n                linkTarget = _context3.sent;\n\n                if (!this.fsw.closed) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 10:\n                if (!this.fsw._isIgnored(linkTarget)) {\n                  _context3.next = 12;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.fsw._emitReady());\n\n              case 12:\n                this.fsw._incrReadyCount(); // add the linkTarget for watching with a wrapper for transform\n                // that causes emitted paths to incorporate the link's path\n\n\n                this._addToFsEvents(linkTarget || linkPath, function (path) {\n                  var aliasedPath = linkPath;\n\n                  if (linkTarget && linkTarget !== DOT_SLASH) {\n                    aliasedPath = path.replace(linkTarget, linkPath);\n                  } else if (path !== DOT_SLASH) {\n                    aliasedPath = sysPath.join(linkPath, path);\n                  }\n\n                  return transform(aliasedPath);\n                }, false, curDepth);\n\n                _context3.next = 20;\n                break;\n\n              case 16:\n                _context3.prev = 16;\n                _context3.t0 = _context3[\"catch\"](4);\n\n                if (!this.fsw._handleError(_context3.t0)) {\n                  _context3.next = 20;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.fsw._emitReady());\n\n              case 20:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[4, 16]]);\n      }));\n\n      function _handleFsEventsSymlink(_x12, _x13, _x14, _x15) {\n        return _handleFsEventsSymlink2.apply(this, arguments);\n      }\n\n      return _handleFsEventsSymlink;\n    }()\n    /**\n     *\n     * @param {Path} newPath\n     * @param {fs.Stats} stats\n     */\n\n  }, {\n    key: \"emitAdd\",\n    value: function emitAdd(newPath, stats, processPath, opts, forceAdd) {\n      var pp = processPath(newPath);\n      var isDir = stats.isDirectory();\n\n      var dirObj = this.fsw._getWatchedDir(sysPath.dirname(pp));\n\n      var base = sysPath.basename(pp); // ensure empty dirs get tracked\n\n      if (isDir) this.fsw._getWatchedDir(pp);\n      if (dirObj.has(base)) return;\n      dirObj.add(base);\n\n      if (!opts.ignoreInitial || forceAdd === true) {\n        this.fsw._emit(isDir ? EV_ADD_DIR : EV_ADD, pp, stats);\n      }\n    }\n  }, {\n    key: \"initWatch\",\n    value: function initWatch(realPath, path, wh, processPath) {\n      if (this.fsw.closed) return;\n\n      var closer = this._watchWithFsEvents(wh.watchPath, sysPath.resolve(realPath || wh.watchPath), processPath, wh.globFilter);\n\n      this.fsw._addPathCloser(path, closer);\n    }\n    /**\n     * Handle added path with fsevents\n     * @param {String} path file/dir path or glob pattern\n     * @param {Function|Boolean=} transform converts working path to what the user expects\n     * @param {Boolean=} forceAdd ensure add is emitted\n     * @param {Number=} priorDepth Level of subdirectories already traversed.\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"_addToFsEvents\",\n    value: function () {\n      var _addToFsEvents2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(path, transform, forceAdd, priorDepth) {\n        var _this2 = this;\n\n        var opts, processPath, wh, stats, realPath;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this.fsw.closed) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 2:\n                opts = this.fsw.options;\n                processPath = typeof transform === FUNCTION_TYPE ? transform : IDENTITY_FN;\n                wh = this.fsw._getWatchHelpers(path); // evaluate what is at the path we're being asked to watch\n\n                _context4.prev = 5;\n                _context4.next = 8;\n                return statMethods[wh.statMethod](wh.watchPath);\n\n              case 8:\n                stats = _context4.sent;\n\n                if (!this.fsw.closed) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 11:\n                if (!this.fsw._isIgnored(wh.watchPath, stats)) {\n                  _context4.next = 13;\n                  break;\n                }\n\n                throw null;\n\n              case 13:\n                if (!stats.isDirectory()) {\n                  _context4.next = 20;\n                  break;\n                }\n\n                // emit addDir unless this is a glob parent\n                if (!wh.globFilter) this.emitAdd(processPath(path), stats, processPath, opts, forceAdd); // don't recurse further if it would exceed depth setting\n\n                if (!(priorDepth && priorDepth > opts.depth)) {\n                  _context4.next = 17;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 17:\n                // scan the contents of the dir\n                this.fsw._readdirp(wh.watchPath, _objectSpread({\n                  fileFilter: function fileFilter(entry) {\n                    return wh.filterPath(entry);\n                  },\n                  directoryFilter: function directoryFilter(entry) {\n                    return wh.filterDir(entry);\n                  }\n                }, Depth(opts.depth - (priorDepth || 0)))).on(STR_DATA, function (entry) {\n                  // need to check filterPath on dirs b/c filterDir is less restrictive\n                  if (_this2.fsw.closed) {\n                    return;\n                  }\n\n                  if (entry.stats.isDirectory() && !wh.filterPath(entry)) return;\n                  var joinedPath = sysPath.join(wh.watchPath, entry.path);\n                  var fullPath = entry.fullPath;\n\n                  if (wh.followSymlinks && entry.stats.isSymbolicLink()) {\n                    // preserve the current depth here since it can't be derived from\n                    // real paths past the symlink\n                    var curDepth = opts.depth === undefined ? undefined : calcDepth(joinedPath, sysPath.resolve(wh.watchPath)) + 1;\n\n                    _this2._handleFsEventsSymlink(joinedPath, fullPath, processPath, curDepth);\n                  } else {\n                    _this2.emitAdd(joinedPath, entry.stats, processPath, opts, forceAdd);\n                  }\n                }).on(EV_ERROR, EMPTY_FN).on(STR_END, function () {\n                  _this2.fsw._emitReady();\n                });\n\n                _context4.next = 22;\n                break;\n\n              case 20:\n                this.emitAdd(wh.watchPath, stats, processPath, opts, forceAdd);\n\n                this.fsw._emitReady();\n\n              case 22:\n                _context4.next = 27;\n                break;\n\n              case 24:\n                _context4.prev = 24;\n                _context4.t0 = _context4[\"catch\"](5);\n\n                if (!_context4.t0 || this.fsw._handleError(_context4.t0)) {\n                  // TODO: Strange thing: \"should not choke on an ignored watch path\" will be failed without 2 ready calls -__-\n                  this.fsw._emitReady();\n\n                  this.fsw._emitReady();\n                }\n\n              case 27:\n                if (!(opts.persistent && forceAdd !== true)) {\n                  _context4.next = 41;\n                  break;\n                }\n\n                if (!(typeof transform === FUNCTION_TYPE)) {\n                  _context4.next = 32;\n                  break;\n                }\n\n                // realpath has already been resolved\n                this.initWatch(undefined, path, wh, processPath);\n                _context4.next = 41;\n                break;\n\n              case 32:\n                _context4.prev = 32;\n                _context4.next = 35;\n                return realpath(wh.watchPath);\n\n              case 35:\n                realPath = _context4.sent;\n                _context4.next = 40;\n                break;\n\n              case 38:\n                _context4.prev = 38;\n                _context4.t1 = _context4[\"catch\"](32);\n\n              case 40:\n                this.initWatch(realPath, path, wh, processPath);\n\n              case 41:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[5, 24], [32, 38]]);\n      }));\n\n      function _addToFsEvents(_x16, _x17, _x18, _x19) {\n        return _addToFsEvents2.apply(this, arguments);\n      }\n\n      return _addToFsEvents;\n    }()\n  }]);\n\n  return FsEventsHandler;\n}();\n\nmodule.exports = FsEventsHandler;\nmodule.exports.canUse = canUse;","map":null,"metadata":{},"sourceType":"script"}