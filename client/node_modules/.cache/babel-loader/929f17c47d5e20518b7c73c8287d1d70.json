{"ast":null,"code":"var spawn = require('child_process').spawn;\n\nmodule.exports = {\n  tree: tree,\n  pidsForTree: pidsForTree,\n  getStat: getStat\n};\n\nfunction getStat() {\n  return new Promise(function (resolve) {\n    var command = \"ls /proc | grep -E '^[0-9]+$' | xargs -I{} cat /proc/{}/stat\";\n    var spawned = spawn('sh', ['-c', command], {\n      stdio: ['pipe', 'pipe', 'pipe']\n    });\n    var res = '';\n    spawned.stdout.on('data', function (data) {\n      return res += data;\n    });\n    spawned.on('close', function () {\n      return resolve(res);\n    });\n  });\n}\n\nfunction template(s) {\n  var stat = null; // 'pid', 'comm', 'state', 'ppid', 'pgrp'\n  // %d     (%s)    %c       %d      %d\n\n  s.replace(/(\\d+) \\((.*?)\\)\\s(.+?)\\s(\\d+)\\s/g, function (all, PID, COMMAND, STAT, PPID) {\n    stat = {\n      PID: PID,\n      COMMAND: COMMAND,\n      PPID: PPID,\n      STAT: STAT\n    };\n  });\n  return stat;\n}\n\nfunction tree(stats) {\n  var processes = stats.split('\\n').map(template).filter(Boolean);\n  return processes;\n}\n\nfunction pidsForTree(tree, pid) {\n  if (typeof pid === 'number') {\n    pid = pid.toString();\n  }\n\n  var parents = [pid];\n  var pids = [];\n  tree.forEach(function (proc) {\n    if (parents.indexOf(proc.PPID) !== -1) {\n      parents.push(proc.PID);\n      pids.push(proc);\n    }\n  });\n  return pids;\n}","map":null,"metadata":{},"sourceType":"script"}